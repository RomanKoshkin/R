clrs <- c("black","purple", "navyblue","blue", "darkmagenta","green", "yellow", "darkorange", "red")
tit <- paste(win, newlabels[jj])
Them <- theme(axis.title.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y=element_blank(), axis.ticks.y=element_blank(), legend.position="none")
plot1[[jj]] <- ggplot(data = P[-c(1), ], aes(x = hiQ, y = loQ)) + geom_raster(aes(fill = load_main)) + ggtitle(paste(tit, "Load")) + scale_fill_gradientn(colours=clrs,breaks=b) + Them
plot2[[jj]] <- ggplot(data = P[-c(1), ], aes(x = hiQ, y = loQ)) + geom_raster(aes(fill = lang_main)) + ggtitle(paste(tit, "S.Lang.")) + scale_fill_gradientn(colours=clrs,breaks=b) + Them
plot3[[jj]] <- ggplot(data = P[-c(1), ], aes(x = hiQ, y = loQ)) + geom_raster(aes(fill = langXload)) + ggtitle(paste(tit, "Load x S.Lang.")) + scale_fill_gradientn(colours=clrs,breaks=b) + Them
}
# qq <- list()
# qq <- rbind(plot1,plot2, plot3)
# plot_grid(plotlist = qq, nrow = 5, ncol = 3, align = "v")
ee <- list()
ee <- rbind(plot5, plot6, plot7, plot8)
plot_grid(plotlist = ee, nrow = 5, ncol = 4, align = "v")
hist(rbeta(10000,5,2))
hist(rbeta(10000,2,5))
hist(rbeta(10000,5,5))
hist(rchisq(1000,4, ncp=0))
hist(rchisq(10000,4, ncp=0))
hist(rchisq(10000,4, ncp=0), breaks = 20)
qqnorm(rchisq(10000,4, ncp=0), breaks = 20)
qqnorm(rchisq(10000,4, ncp=0))
qqnorm(rchisq(10000,4, ncp=0), breaks = 20)
hist(rchisq(10000,4, ncp=0), breaks = 20)
library(jtrans)
xtrans <- jtrans(rchisq(10000,4, ncp=0), test = "ad.test", exclude_original = TRUE, z_lim = c(0.25, 1.25))
library(nortest)
xtrans <- jtrans(rchisq(10000,4, ncp=0), test = "ad.test", exclude_original = TRUE, z_lim = c(0.25, 1.25))
hist(xtrans$transformed)
hist(xtrans$transformed, breaks = 20)
lillie.test(xtrans$original)
lillie.test(xtrans$transformed)
View(df)
source('~/Documents/R/effSizeEZ.R')
debugSource('~/Documents/R/effSizeEZ.R')
a <- jtrans(df$mu_P1[1:1000], test = "ad.test", exclude_original = TRUE, z_lim = c(0.25, 1.25)) %>% $transformed
a <- jtrans(df$mu_P1[1:1000], test = "ad.test", exclude_original = TRUE, z_lim = c(0.25, 1.25)) %>% transformed
a <- jtrans(df$mu_P1[1:1000], test = "ad.test", exclude_original = TRUE, z_lim = c(0.25, 1.25))
source('~/Documents/R/effSizeEZ.R')
View(P)
source('~/Documents/R/effSizeEZ.R')
View(P)
as.numeric(gsub(".*(<|=)","",as.character(q$V3)))
anova_apa(EE, es = c("pes"))
as.numeric(gsub(".*(<|=)","",as.character(q$V3)))
hist(rchisq(1000, 3, ncp=0), breaks = 20)
hist(rchisq(1000, 3, ncp=0), breaks = 50)
hist(rchisq(10000, 3, ncp=0), breaks = 500)
hist(rchisq(10000, 3, ncp=0), breaks = 100)
hist(rchisq(10000, 3, ncp=0), breaks = 200)
x <- rchisq(10000, 3, ncp=0)
quantile(x, c(0.33, 0.66))
abline(v=5,col="red")
abline(v=5, h=2, col="red")
abline(v=5, col="red")
abline(v=c(5,7), col="red")
abline(v=quantile(x,c(0.33,0.66)), col="red")
hist(x, breaks=100)
abline(v=quantile(x,c(0.33,0.66)), col="red")
abline(v=mode(x), col="red")
abline(v=mod(x), col="blue")
mode(X)
mode(x)
abline(v=median(x), col="blue")
hist(x, breaks=100)
abline(v=quantile(x,c(0.10,0.90)), col="red")
x <- jtrans(x, test = "ad.test", exclude_original = TRUE, z_lim = c(0.25, 1.25))
hist(x$transformed, breaks=100)
a <- rnorm(100, 0, 1)
b <- sample(a,100,replace=T)
sd(b)
b <- sample(a,1000,replace=T)
sd(b)
df2 <- read.csv('p_val_0.15.csv')
View(df2)
df2.sum <- summarySEwithin(df2, measurevar = "mu_N1",
betweenvars = "subj", withinvars = c("lang","load"),
na.rm = TRUE, conf.interval = 0.95)
library(reshape2)
df2.sum <- summarySEwithin(df2, measurevar = "mu_N1",
betweenvars = "subj", withinvars = c("lang","load"),
na.rm = TRUE, conf.interval = 0.95)
library(reshape2)
library(Rmisc)
df2.sum <- summarySEwithin(df2, measurevar = "mu_N1",
betweenvars = "subj", withinvars = c("lang","load"),
na.rm = TRUE, conf.interval = 0.95)
library(reshape2)
library(Rmisc)
df2.sum <- summarySEwithin(df2, measurevar = "P_rand",
betweenvars = "estimator", withinvars = c("lang"),
na.rm = TRUE, conf.interval = 0.95)
View(df2.sum)
data_wide <- dcast(df2, estimator ~ lang, value.var="P_rand")
View(data_wide)
data_wide <- data_wide[c('er', 'RE')]
data_wide <- dcast(df2, estimator ~ lang, value.var="P_rand")
View(data_wide)
data_wide <- data_wide[c('estimator', 'er', 'RE')]
View(df)
View(df2)
View(data_wide)
library(reshape2)
library(Rmisc)
data_wide <- dcast(df2, estimator ~ lang, value.var="P_rand")
data_wide <- data_wide[c('estimator', 'er', 'RE')]
View(data_wide)
View(df2)
data_wide <- dcast(df2, estimator ~ lang + peaks_1 + peaks_2, value.var="P_rand")
data_wide <- data_wide[c('estimator', 'er', 'RE')]
View(data_wide)
data_wide <- dcast(df2, estimator ~ lang, value.var="P_rand")
data_wide <- data_wide[c('estimator', 'er', 'RE')]
View(data_wide)
View(df2)
factors(df2$estimator)
df2$estimator
levels(df2$estimator)
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
df2 <- read.csv('p_val_0.15.csv')
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
View(df2)
which(df2$lang=='both')
df2 <- df2[!which(df2$lang=='both'), ]
View(df2)
df2 <- read.csv('p_val_0.15.csv')
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
View(df2)
df2 <- df2[which(df2$lang!='both'), ]
df2 <- df2[which(df2$lang!='both') & which(df2$lang!='both'), ]
df2 <- df2[which(df2$lang!='both') | which(df2$lang!='both'), ]
df2 <- df2[which(df2$lang!='both') | which(df2$lang!='er'), ]
which(df2$lang!='both') || which(df2$lang!='er')
which(df2$lang!='both') & which(df2$lang!='er')
which(c(df2$lang!='both') which(df2$lang!='er'))
which(c(df2$lang!='both'), which(df2$lang!='er'))
which(df2$lang!='er')
df2 <- read.csv('p_val_0.1.csv')
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
df2 <- df2[which(df2$lang!='both') || which(df2$lang!='er'), ]
df2 <- read.csv('p_val_0.1.csv')
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
df2 <- df2[c(which(df2$lang!='both'), which(df2$lang!='er')), ]
df2 <- read.csv('p_val_0.1.csv')
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
df2 <- df2[which(df2$lang!='both'), ]
df2 <- df2[which(df2$lang!='er'), ]
View(df2)
df2 <- read.csv('p_val_0.1.csv')
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
df2 <- df2[which(df2$lang!='both'), ]
df2 <- df2[which(df2$lang!='RE'), ]
View(df2)
df2 <- read.csv('p_val_0.1.csv')
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
df2 <- df2[which(df2$lang!='both'), ]
df2 <- df2[which(df2$lang!='RE'), ]
View(df2)
df2 <- read.csv('p_val_0.1.csv')
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
df2 <- df2[which(df2$lang!='both'), ]
df2 <- df2[which(df2$lang!='RE'), ]
View(df2)
df2 <- read.csv('p_val_0.1.csv')
levels(df2$estimator) <- c('CL', 'CLall', 'CW', 'CWall', 'SYL')
df2 <- df2[which(df2$lang!='both'), ]
df2 <- df2[which(df2$lang!='er'), ]
1-(5/6)^4
(1/6)^4
(11/12)^9
1-(11/12)^9
1-(11/12)^4
6*25*26*27
factorial(27)
for (i in range(1,3,1)){
print(i)
}
for (i in range(1,10)){
print(i)
}
for (i in range(1,10, by=1)){
print(i)
}
for (i in range(10, by=1)){
print(i)
}
for (i in seq(1,10, by=1)){
print(i)
}
p = 0
for (i in seq(1,10, by=1)){
p[i] = factorial(27)/(factorial(i)*factorial(27-i))
}
p = 0
for (i in seq(3,27, by=1)){
p[i] = factorial(27)/(factorial(i)*factorial(27-i))
}
p = 0
for (i in seq(3,27, by=1)){
print(i)
p[i] = factorial(27)/(factorial(i)*factorial(27-i))
}
factorial(27)/(factorial(4)*factorial(27-4))
p
p = 0
for (i in seq(3,27, by=1)){
print(i)
p[i] = (factorial(27)/(factorial(i)*factorial(27-i)))/12^27
}
p = 0
for (i in seq(3,27, by=1)){
p[i] = (factorial(27)/(factorial(i)*factorial(27-i)))/12^27
}
sum(p[3:27])
p = 0
for (i in seq(1,27, by=1)){
p[i] = (factorial(27)/(factorial(i)*factorial(27-i)))/12^27
}
sum(p[1:27])
p = 0
noOutcomes = 2
noFlips = 5
for (i in seq(1,noFlips, by=1)){
p[i] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:noFlips])
p
1/32
noOutcomes^noFlips
p = 0
noOutcomes = 2
noFlips = 5
for (i in seq(0,noFlips, by=1)){
p[i] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[0:noFlips])
p
p[0]
p[1]
p = 0
noOutcomes = 2
noFlips = 5
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[0+1:noFlips+1])
p
1/32
5/32
10/32
sum(p[0+1:noFlips+1])
1/32+5/32+10/32+10/32+5/32+1/32
1/32
p
sum(p)
sum(p[1:noFlips+1])
sum(p[1:(noFlips+1)])
sum(p[1:noFlips+1])
sum(p[1:(noFlips+1)])
p = 0
noOutcomes = 12
noFlips = 5
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:(noFlips+1)])
p = 0
noOutcomes = 2
noFlips = 5
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:(noFlips+1)])
p = 0
noOutcomes = 3
noFlips = 5
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:(noFlips+1)])
p = 0
noOutcomes = 2
noFlips = 5
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:(noFlips+1)])
p = 0
noOutcomes = 2
noFlips = 6
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:(noFlips+1)])
p = 0
noOutcomes = 2
noFlips = 7
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:(noFlips+1)])
p = 0
noOutcomes = 3
noFlips = 7
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:(noFlips+1)])
p = 0
noOutcomes = 3
noFlips = 20
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:(noFlips+1)])
p = 0
noOutcomes = 2
noFlips = 5
for (i in seq(0,noFlips, by=1)){
p[i+1] = (factorial(noFlips)/(factorial(i)*factorial(noFlips-i)))/noOutcomes^noFlips
}
sum(p[1:(noFlips+1)])
(factorial(6)/(factorial(4)*factorial(6-4)))
x = 0
(factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
x = 1
(factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
x = 2
(factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
x = 3
(factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
x = 0
(factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
x = 1
(factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
for (x in seq(1:4, by=1)){
p[x] = (factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
}
for (x in seq(1, 4, by=1)){
p[x] = (factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
}
p
p=0
for (x in seq(1, 4, by=1)){
p[x] = (factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
}
p
x = 0
(factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
1 - (factorial(6)/(factorial(x)*factorial(6-x)))*(1/6)^x * (1-1/6)^(6-x)
n = 4
for (x in seq(0, n, by=1)){
append (p, (factorial(n)/(factorial(x)*factorial(n-x)))*(1/6)^x * (1-1/6)^(6-x))
}
n = 4
p = 0
pSuccess = 1/6
for (x in seq(0, n, by=1)){
append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
n = 4
p = 0
pSuccess = 1/6
for (x in seq(0, n, by=1)){
append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
p
(factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x)
append(p, 1)
n = 4
p = 0
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
p
n = 4
p = 0
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
print(p)
print(sum(p))
n = 5
p = 0
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
print(p)
print(sum(p))
hist(p)
barplot(p)
density(p)
n = 27
p = 0
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
print(p)
print(sum(p))
n = 27
p = []
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
print(p)
print(sum(p))
n = 27
del(p)
p = []
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
print(p)
print(sum(p))
length(p)
p=[]
p <- []
p <- ()
del(p)
rm(p)
n = 27
rm(p)
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
print(p)
print(sum(p))
p <- []
p <- list()
n = 27
rm(p)
p <- list()
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
print(p)
print(sum(p))
barplot(p)
p <- as.numeric(p)
barplot(p)
sum(p)
p <- as.numeric(NULL)
n = 27
p <- as.numeric(NULL)
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
print(p)
print(sum(p))
n = 27
p <- as.numeric(NULL)
pSuccess = 1/6
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
barplot(p)
print(sum(p))
n = 27
p <- as.numeric(NULL)
pSuccess = 1/12
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
barplot(p)
print(sum(p))
sum(p[3:28])
n = 5
p <- as.numeric(NULL)
pSuccess = 1/2
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
barplot(p)
print(sum(p))
p
1/32
5/32
n = 27
p <- as.numeric(NULL)
pSuccess = 1/12
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
barplot(p)
print(sum(p))
n = 27
p <- as.numeric(NULL)
pSuccess = 1/12
for (x in seq(0, n, by=1)){
p <- append (p, (factorial(n)/(factorial(x)*factorial(n-x))) * pSuccess^x * (1-pSuccess)^(n-x))
}
barplot(p)
print(sum(p[4:28]))
nTrials = 27
p <- as.numeric(NULL)
pSuccess = 1/12
for (x in seq(0, n, by=1)){
p <- append (p, (
factorial(nTrials)/(factorial(x)*factorial(nTrials-x))) *
pSuccess^x * (1-pSuccess)^(nTrials-x))
}
barplot(p)
print(sum(p[4:28]))
